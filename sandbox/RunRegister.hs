------------------------------------------------------------------------
-- Hydra: A functional digital circuit design language
-- Example: RunRegister
------------------------------------------------------------------------

-- Run simulations of a collection of register circuits defined in
-- Register.hs.  These include registers defined for specific word
-- sizes; registers generated by a general n-bit circuit generator at
-- several word sizes; and some register file circuits.  To run the
-- simulations, enter the following:

--    ghci
--    :load RunRegister
--    main

-- This file illustrates how to write and run simulation drivers, so
-- it contains more elaborate comments than usual.  The file contains:

-- Module definition and imports
-- Main program
-- Simulation driver for register
-- Simulation driver for register file
-- Test data

------------------------------------------------------------------------
-- Module definition and imports

module Main where
import HDL.Hydra.Core.Lib
import HDL.Hydra.Circuits.StandardCircuits
import Register

------------------------------------------------------------------------
-- Main program

-- Print a line to separate output from different simulations
separator :: IO ()
separator = putStrLn (take 76 (repeat '-'))

-- The main program runs a sequence of simulations

main :: IO ()
main =
  do separator
     putStrLn "Simulate RF4"
     runRF4 testdata1

     separator
     putStrLn "Simulate generated regfile"
     run_regfile 4 2 testdata1

     separator
     putStrLn "Simulate generated regfile"
     run_regfile 8 4 testdata2
     separator

------------------------------------------------------------------------
-- Simulation driver for register file

run_regfile :: Int -> Int -> [[Int]] -> IO ()
run_regfile n k input =
  do putStrLn ("run_regfile n=" ++ show n ++ " k=" ++ show k)
     runAllInput input output
  where

-- Extract the input signals
    ld = getbit   input 0
    d  = getbin k input 1
    sa = getbin k input 2
    sb = getbin k input 3
    x  = getbin n input 4

-- Connect the circuit to inputs and outputs
    (a,b) = regfile n k ld d sa sb x

-- Format the output
    output =
      [string "  ld=", bit ld,
       string " d=", hex d,
       string " sa=", bindec 2 sa,
       string " sb=", bindec 2 sb,
       string "   Output: ",
       string " a=", bindec 4 a,
       string " b=", bindec 4 b]

runRF4 :: [[Int]] -> IO ()
runRF4 input = runAllInput input output
  where

-- Extract the input signals
    ld  = getbit   input 0
    d   = getbit2  input 1
    sa  = getbit2  input 2
    sb  = getbit2  input 3
    x   = getbin 4 input 4
    (d0,d1) = d
    (sa0,sa1) = sa
    (sb0,sb1) = sb

-- Connect the circuit to inputs and outputs
    (a,b) = rf4 ld x d sa sb

-- Format the output
    output =
      [string "  ld=", bit ld,
       string "  d=", bit d0, bit d1,
       string "  sa=", bit sa0, bit sa1,
       string "  sb=", bit sb0, bit sb1,
       string "  x=", hex x,
       string "     Output: ",
       string "  a=", hex a,
       string "  b=", hex b]

------------------------------------------------------------------------
-- Test data for register file

-- testdata1 is suitable for word size n=4 and array size k=2; that
-- is, it uses 2^2 registers, each containing a 4-bit word. It can be
-- used with the small rf4 circuit.

testdata1 :: [[Int]]
testdata1 =
-----------------------------------------------------
--      ld   d  sa  sb   x         effect    a  b
-----------------------------------------------------
       [[1,  3,  0,  0, 13],  -- R3 := 13    0  0
        [1,  1,  0,  3,  5],  -- R1 :=  5    0 13
        [0,  3,  0,  3,  6],  --             0 13
        [1,  2,  3,  2, 15]]  -- R2 := 15    5  0

-- testdata2 is suitable for word size n=16 and array size k=4.  That
-- is, it uses 2^4 registers, each containing a 16-bit word.  The
-- numbers here are too large for use with the small rf4 circuit.

testdata2 :: [[Int]]
testdata2 =
-----------------------------------------------------
--      ld   d  sa  sb   x         effect       a   b
-----------------------------------------------------
       [[1,  3, 12,  2, 204],  -- R3  := 204    0   0
        [1, 12, 12,  3,  74],  -- R12 :=  74    0 204
        [0,  3, 12,  3, 199],  --              74 204
        [1,  0,  0,  0,   2]]  -- R0  :=   2    0   0

